{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACXC,mBAAU,IADC,mBACzCC,EADyC,KAC7BC,EAD6B,KAoBjD,OAEC,oCACC,8CAEA,0BAAMC,SAjBa,SAAAC,GAEpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAG/BR,GAAe,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OAC1CN,EAAe,OAYd,2BACCO,KAAK,OACLC,MAAQT,EACRU,SA5BsB,SAAAP,GAEzBF,EAAeE,EAAEQ,OAAOF,QA2BrBG,YAAY,yCAId,+B,uBCxCUC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAIbC,EAJa,iDAImCF,EAJnC,+DAKAG,MAAMD,GALN,cAKbE,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAIFC,EAAOD,EAAKE,KAAI,SAACC,GAAW,IAAD,EAC7B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbT,IAAG,UAAEO,EAAMG,cAAR,aAAE,EAAcC,iBAAiBX,QAdzB,kBAmBZK,GAnBY,kCA0BfO,QAAQC,IAAR,MA1Be,0DAAH,sDCEPC,EAAc,SAAC,GAAsB,IAAnBL,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IAElC,OACI,yBAAKe,UAAU,QACX,yBAAKC,IAAMhB,EAAMiB,IAAMR,IACvB,+BAAMA,EAAN,OCHCS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAEPzB,EAASC,GACJyB,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAAErB,IAGEsB,EDlB0BK,CAAc3B,GAAlCY,EAHwB,EAG7BN,KAAae,EAHgB,EAGhBA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAd,IAAqDjB,EAArD,KAEEqB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGPL,EAAOJ,KAAK,SAAAoB,GAAG,OACX,kBAAC,EAAD,eAAaC,IAAMD,EAAIlB,IAAUkB,UEwB1CE,EArCM,WAAO,IAAD,EAEc7C,mBAAU,IAFxB,mBAEhB8C,EAFgB,KAEJ/C,EAFI,KAcxB,OACG,oCACJ,kBAAC,EAAD,CAAaA,cAAgBA,IAY3B+C,EAAWvB,KAAK,SAAAR,GAAQ,OACvB,kBAAC,EAAD,CAAS6B,IAAM7B,EAAWA,SAAWA,S,MC7B1CgC,IAASC,OACN,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.69c91ed1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\tconst [ inputValue, setInputValue ] = useState( '' )\r\n\r\n\tconst handleInputChange = e => {\r\n\t\t// console.log(e.target.value);\r\n\t\tsetInputValue( e.target.value )\r\n\t}\r\n\r\n\tconst handleSubmit = e => {\r\n\r\n\t\te.preventDefault()\r\n\r\n\t\tif ( inputValue.trim().length > 2 ) {\r\n\t\t\t// With only call to 'setCategories()' we get a reference\r\n\t\t\t// to 'cats' (state before) !!!\r\n\t\t\tsetCategories( (cats) => [ inputValue, ...cats ] )\r\n\t\t\tsetInputValue( '' )\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<>\r\n\t\t\t<h1>Gif Expert App</h1>\r\n\r\n\t\t\t<form onSubmit={ handleSubmit }>\r\n\t\t\t\t{/* <h1>{ inputValue }</h1>        */}\r\n\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tvalue={ inputValue } \r\n\t\t\t\t\tonChange={ handleInputChange } \r\n\t\t\t\t\tplaceholder=\"Write something to search please...\"\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\r\n\t\t\t<hr /> \t\t\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async (category) => {\r\n\r\n  try {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=20&api_key=WRGyMKsY3JCU9iUe34xRNISR4CdqxMrr`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    // console.log(data)\r\n\r\n    const gifs = data.map((image) => {\r\n        return {\r\n            id: image.id,\r\n            title: image.title,\r\n            url: image.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    // Return a Promise due to use 'async/await'\r\n    return gifs \r\n\r\n    // All state is loaded with arrays of images\r\n    // setImages( gifs )\r\n\r\n  } catch (error) {\r\n\r\n        console.log(error)\r\n\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\t// Custom Hook\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem key={ img.id } { ...img } />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n}","import React, { useState } from 'react';\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n   \r\n   const [ categories, setCategories ] = useState( [] );  \r\n   \r\n   // const handleAdd = event => {\r\n      // 1.\r\n      // setCategories([...categories, event.target.previousSibling.value]);\r\n      \r\n      // 2.\r\n      // setCategories(cats => [...cats, event.target.previousSibling.value]);\r\n      \r\n      // event.target.previousSibling.value = '';   \r\n   // }\r\n   \r\n   return (\r\n      <>       \r\n\t\t<AddCategory setCategories={ setCategories } />\r\n\r\n\t\t{ \r\n\t\t/*\r\n\t\t<label htmlFor=\"search\">Search: </label>\r\n\t\t<input id=\"addItem\" type=\"text\" />\r\n\t\t<button onClick={handleAdd} >Agregar</button>\r\n\t\t*/ \r\n\t\t}\r\n\t\t\r\n\t\t{/* <ol> */}\r\n\t\t\t{\r\n\t\t\t\tcategories.map( category => (\r\n\t\t\t\t\t<GifGrid key={ category } category={ category }\t/>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t{/* </ol> */}\r\n      </>\r\n   )      \r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n   <GifExpertApp />,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}